## 1 Basics

``` C++
#include <bits/stdc++.h> 
int main(){
	
}
```
### Put at the beginning of code:  
ios::sync_with_stdio(0);
cin.tie(0);

### Read in file
freopen("input.txt", "r", stdin);
freopen("output.txt", "w", stdout);

## 1.3 Working with numbers
Int: −2^31...2^31−1

### Floating point numbers
printf("%.9f\n", x);
9 digit precision

May have imprecision in floats so use a machine episilon
if (abs(a-b) < 1e-9) {
    // a and b are equal
}

## 1.4 Shortening Code

### Type names
typedef long long ll;

### Macros
#define f first
or
#define REP(i,a,b) for (int i = a; i <= b; i++)
Rep(i, 1, n){
	search(i);
}

sometimes macros can cause bugs

## 1.5 Mathematics

### Sums
Sum of 1 to n for x is n(n+1)/2
Sum of 1 to n for x^2 is n(n+1)(2n+1)/6

Arithmetic progression: A sequence of numbers where the difference between any two consecutive numbers is a constant. eg. 3,7,11,15

a + ... + b = n(a+b)/2

Geometric progression: A sequence of numbers where the the ratio between any two consecutive numbers is a constant. eg. 3,6,12,24

a + ak + ak^2 + ak^3... + b = (bk - a) / (b-1)

Special geometric is:
1+2+4+8...2^(n-1) = 2^n -1

Harmonic Sum:

Sum of 1 to n for 1/x upper bound is log_2(n) + 1

### Set Theory
Collection of elements

Intersection: contained in both sets (A ^ B)
Union: Elements in A, B or Both (A V B)
Complement: Elements not in the set (Ahat)
Difference: Elements in A that are not in B (A \ B)
Subset: Every element of A is in S. There are always 2^(|S|) subsets (A c S)

### Logic
True(1) or False(0)
- Negation, ^ Conjunction, V Disjunction, -> Implication, <-> Equivalence

### Functions
Ceiling, Floor, Max, Min, Fibonacci Numbers

### Logarithms
log_k(ab) = log_k(a) + log_k(b)
log_k(x^n) = n * log_k(x)
log_k(a/b) = log_k(a) - log_k(b)
log_u(x) = log_k(x) / log_k(u)

## 1.6 Contests and Resources
IOI-secondary students
ICP-university students
Online Contests
Books

## 2 Time Complexity
Loops based on times run, nested are O(n^k)

### 2.2 Complexity Classes
Polynomial at most O(n^k)

### 2.3 Estimate Efficiency
input size - required time complexity
n <= 10 - O(n!)
n <= 20 - O(2^n)
n <= 500 - O(n^3)
n <= 5000 - O(n^2)
n <= 10^6 - O(n) or O(nlogn)
n is large - O(1) or O(logn)

### 2.4 Maximum subarray sum
Algorithm 1 brute force O(n^3)
Algorithm 2 check each ending O(n^2)
Algorithm 3 save value or use current O(n)

## 3 Sorting
Bubble Sort O(n^2)
Merge Sort O(nlogn)
Bookeeping Sort

### 3.2 Sorting in C++
```
vector<int> v = {4,2,5,3,5,8,3};
sort(v.begin(),v.end());
// reverse
sort(v.rbegin(),v.rend());
```
pairs sorted by first element first then second element

#### user defined structs
struct P {
	int x,y;
	bool operator<(const P &p){
		if(x != p.x) return x < p.x;
		else return y < p.y;
	}
}
external comparison function
bool comp(string a, string b){
	if (a.size() != b.size()) return a.size() < b.size();
    return a < b;
}

sort(v.begin(), v.end(), comp);

### 3.3 Binary Search
O(n) unsorted find
O(logn) if it is sorted

### C++ Functions
lower_bound - first array element at least x
upper_bound - first array element larger than x
equal_range - returns both above pointers

auto k = lower_bound(array,array+n,x)-array;
if (k < n && array[k] == x) {
    // x found at index k
}

## 4 Data Structures
Dynamic Arrays
vector<int> v;
for (int i = 0; i < v.size(); i++) {
    cout << v[i] << "\n";
}
for (auto x : v) {
    cout << x << "\n";
}
// size 10, initial value 5
vector<int> v(10, 5);

### 4.2 Set Structure
distinct elements
balanced binary tree, operations in O(logn)
unordered_set is more efficient, uses hashing O(1)
set<int> s;
s.insert(3);
s.insert(2);

multiset<int> s; // allows more than one of an element

### 4.3 Map Structure
map<string, int> m;
balanced binary tree, operations in O(logn)
unordered_map is more efficient, uses hashing O(1)

find element
m.count("aybabtu");

elements in the map
for(auto x : m){
	cout << x.first << " " << x.second << endl;
}

### 4.4 Iterators and Ranges
points to an element in a data structure
auto it = s.begin();
cout << *it << "\n";

// move forwards and backwards
for (auto it = s.begin(); it != s.end(); it++) {
   	cout << *it << "\n";
}

### 4.3 Other Structures

## Bitset
array whose values are either 0 or 1

## Deque
deque<int> d;
d.push_back(5); // [5]
d.push_back(2); // [5,2]
d.push_front(3); // [3,5,2]
d.pop_back(); // [3,5]
d.pop_front(); // [5]

## Stack
stack<int> s;
s.push(3);
s.push(2);
s.push(5);
cout << s.top(); // 5
s.pop();
cout << s.top(); // 2

## Queue
queue<int> q;
q.push(3);
q.push(2);
q.push(5);
cout << q.front(); // 3
q.pop();
cout << q.front(); // 2

priority_queue<int> q;
q.push(3);
q.push(5);
q.push(7);
q.push(2);
cout << q.top() << "\n"; // 7
q.pop();
cout << q.top() << "\n"; // 5
q.pop();
q.push(6);
cout << q.top() << "\n"; // 6
q.pop();

### 4.6 Comparison to Sorting
Checking elements in A are in B
Algo 1: Brute force O(n^2)
Algo 2: Use an unordered map O(nlogn)
Algo 3: Sort O(nlogn), but faster since sort is done once at the beginning

## 5 Complete Search
Subsets
Method 1, recursion
Method 2, binary representation of numbers to form subsets

### 5.2 Generating Permutations

### 5.3 Backtracking
A backtracking algorithm begins with an empty solution and extends the solution step by step.

### 5.5 Meet in the Middle
Technique where the search space is divided into two parts of about equal size.

## 6 Greedy Algorithms
A solution to the problem by always making a choice that looks the best at the moment.

{1, 2, 5, 10, 20, 50, 100, 200}
Coin problem for Euro works in this case. (not always)

### 6.2 Scheduling

### 6.3 Tasks and Deadlines

### 6.4 Minimizing Sums
brute force, random
want the median
other sum
want the average

### 6.4 Data Compression
compress the letters
constant-length they all have the same length
variable-length they are different

Huffman Encoding
greedy algorithm
binary string based on frequencies

## Chapter 7 Dynamic Programming
overlapping subproblem
- Finding an optimal solution: We want to find a solution that is as large as possible or as small as possible.
- Counting the number of solutions: We want to calculate the total num- ber of possible solutions.

memoization

Recursive formulation
iterative method 0 to n

Count number of solutions
same recursive breakdown of sums.

### 7.2 Longest Increasing Subsequence
Look back at the longest sequence up to an index, and try to look back to add on to a previous sequence if the value is lower.

### 7.3 Paths in a grid
Find the maximum grid going down and right.
Look at the one above and to the left, and form the max to that point using dp.

### 7.4 Knapsack problem
Given a list of weights, find the sums that can be created.
Using first k weights. Based on if we can get it with k-1 weights, or x-w_k with k - 1 weights. At each point you see if including or excluding the kth weight will get to the value we want.

possible[0][0] = true;
for (int k = 1; k <= n; k++) {
    for (int x = 0; x <= W; x++) {
       if (x-w[k] >= 0) possible[x][k] |= possible[x-w[k]][k-1];
       possible[x][k] |= possible[x][k-1];
	} 
}

### 7.5 Edit Distance
Change the string by removing, adding, or replace

distance(a, b) = min(distance(a, b - 1) + 1, distance(a - 1, b) + 1,
distance(a - 1, b - 1) + cost(a, b))

### 7.6 Counting Tiling

Let count(k,x) denote the number of ways to construct a solution for rows 1...k of the grid such that string x corresponds to row k. It is possible to use dynamic programming here, because the state of a row is constrained only by the state of the previous row.

## Chapter 8 Amortized Analysis

### 8.1 Two pointers method

Subarray sum
Subarray equals to a sum

### 2SUM Problem
sort, then two pointers

3SUM, sort then perform 2SUM on each index of a shortened array

### 8.2 Nearest smaller elements

keep a stack, and push on the elements as it grows, but pop off when the numbers are larger on the stack until the last number is smaller than the value.

### 8.3 Sliding Window

A sliding window is a constant-size subarray that moves from left to right through the array. At each window position, we want to calculate some infor- mation about the elements inside the window. In this section, we focus on the problem of maintaining the sliding window minimum, which means that we should report the smallest value inside each window.

## Chapter 9 Range Queries

sum(a,b) sum from a to b
min(a,b) min from a to b
max(a,b) max from a to b

### 9.1 Static Array Queries

### Sum Queries
sums from 0 to k
Then form sum(a,b) from sum(0,b) - sum(0,a-1)
can be changed to get two-dimensional data, such as from the top left corner to form any rectangle

### Minimum Queries
calculate min(a,b) where b-a+1 is a power of 2
recursive formula
minq(a,b)=min(minq(a,a+w-1),minq(a+w,b))

### 9.2 Binary Indexed Tree
O(logn) operations on an array
processing a range sum query and updating a value
better than rebuilding the sum array again in O(n)

Structure:
Let p(k) denote the largest power of two that divides k. We store a binary indexed tree as an array tree such that
tree[k]=sumq(k-p(k)+1,k),
k(6) = 2, since 2 is the largest power of 2 to go into 6

Implementation
p(k)=k & -k

sum(1,k);
int sum(int k) {
    int s = 0;
    while (k >= 1) {
       s += tree[k];
	   k -= k&-k; 
	}
	return s; 
}

add(1,k);
void add(int k, int x) {
    while (k <= n) {
		tree[k] += x;
		k += k&-k; 
	}
}

### 9.3 Segment Tree
- more memory and more complicated than bit, but has all queries
- bt with bottom as an array
- get the top two nodes for the sum
- changing value goes up the tree

Implementation
array of 2n elements
the parent of tree[k] is tree[floor(k/2)], and its children are tree[2k] and tree[2k + 1]

int sum(int a, int b) {
    a += n; b += n;
    int s = 0;
    while (a <= b) {
       if (a%2 == 1) s += tree[a++];
       if (b%2 == 0) s += tree[b--];
       a /= 2; b /= 2;
	}
	return s; 
}

Other Queries
the segment tree can contain the minimum and not the sum

### 9.4 Additional Techniques
c(x) compresses the index

Range Updates
update range and retrieve single values
difference array: values difference between consecutive values in the array

## Chapter 10 Bit Manipulation
signed: negative and positive
unsigned: positive

### Bit Operations
AND both have the same bit
OR least one has the bit
XOR exactly one has the bit
NOT bits inverted
Bit shifts
x << k is x multiplied by 2^k
x >> k is x divided by 2^k

### 10.3 Representing Sets
A subset of {0, to n-1}
can be represented as an n bit integer whose one bits indicate which elements belong to the subset

Set Operations
Intersection a ^ b
Union a v b
Complement ~a
Difference a & (~b)

### 10.4 Hamming Distance

